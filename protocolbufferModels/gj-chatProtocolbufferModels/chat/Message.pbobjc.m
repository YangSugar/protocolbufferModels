// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "Message.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - MessageRoot

@implementation MessageRoot

// No extensions in the file and no imports, so no need to generate
// +extensionRegistry.

@end

#pragma mark - MessageRoot_FileDescriptor

static GPBFileDescriptor *MessageRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"com.xinhuibao.cloud.app.mars.model"
                                                     syntax:GPBFileSyntaxProto2];
  }
  return descriptor;
}

#pragma mark - MessageResponse

@implementation MessageResponse

@dynamic hasSuccess, success;
@dynamic hasErrCode, errCode;
@dynamic hasType, type;
@dynamic hasValue, value;
@dynamic hasSessionId, sessionId;

typedef struct MessageResponse__storage_ {
  uint32_t _has_storage_[1];
  int32_t success;
  int32_t errCode;
  int32_t type;
  MessageData *value;
  NSString *sessionId;
} MessageResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "success",
        .dataTypeSpecific.className = NULL,
        .number = MessageResponse_FieldNumber_Success,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MessageResponse__storage_, success),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "errCode",
        .dataTypeSpecific.className = NULL,
        .number = MessageResponse_FieldNumber_ErrCode,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(MessageResponse__storage_, errCode),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "type",
        .dataTypeSpecific.className = NULL,
        .number = MessageResponse_FieldNumber_Type,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(MessageResponse__storage_, type),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "value",
        .dataTypeSpecific.className = GPBStringifySymbol(MessageData),
        .number = MessageResponse_FieldNumber_Value,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(MessageResponse__storage_, value),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "sessionId",
        .dataTypeSpecific.className = NULL,
        .number = MessageResponse_FieldNumber_SessionId,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(MessageResponse__storage_, sessionId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[MessageResponse class]
                                     rootClass:[MessageRoot class]
                                          file:MessageRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MessageResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\002\007\000\005\t\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MessageData

@implementation MessageData

@dynamic hasMessageId, messageId;
@dynamic hasContent, content;
@dynamic hasParam, param;
@dynamic hasSendTime, sendTime;
@dynamic hasSourceId, sourceId;
@dynamic hasFrom, from;
@dynamic hasMsgType, msgType;
@dynamic hasTo, to;

typedef struct MessageData__storage_ {
  uint32_t _has_storage_[1];
  int32_t msgType;
  NSString *messageId;
  NSString *content;
  NSString *param;
  NSString *sourceId;
  NSString *from;
  NSString *to;
  int64_t sendTime;
} MessageData__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "messageId",
        .dataTypeSpecific.className = NULL,
        .number = MessageData_FieldNumber_MessageId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MessageData__storage_, messageId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "content",
        .dataTypeSpecific.className = NULL,
        .number = MessageData_FieldNumber_Content,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(MessageData__storage_, content),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "param",
        .dataTypeSpecific.className = NULL,
        .number = MessageData_FieldNumber_Param,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(MessageData__storage_, param),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "sendTime",
        .dataTypeSpecific.className = NULL,
        .number = MessageData_FieldNumber_SendTime,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(MessageData__storage_, sendTime),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "sourceId",
        .dataTypeSpecific.className = NULL,
        .number = MessageData_FieldNumber_SourceId,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(MessageData__storage_, sourceId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "from",
        .dataTypeSpecific.className = NULL,
        .number = MessageData_FieldNumber_From,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(MessageData__storage_, from),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "msgType",
        .dataTypeSpecific.className = NULL,
        .number = MessageData_FieldNumber_MsgType,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(MessageData__storage_, msgType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "to",
        .dataTypeSpecific.className = NULL,
        .number = MessageData_FieldNumber_To,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(MessageData__storage_, to),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[MessageData class]
                                     rootClass:[MessageRoot class]
                                          file:MessageRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MessageData__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\004\001\t\000\004\010\000\005\010\000\007\007\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MessageACKResponse

@implementation MessageACKResponse

@dynamic hasSuccess, success;
@dynamic hasErrCode, errCode;
@dynamic hasMessage, message;
@dynamic hasSessionId, sessionId;

typedef struct MessageACKResponse__storage_ {
  uint32_t _has_storage_[1];
  int32_t success;
  int32_t errCode;
  NSString *message;
  NSString *sessionId;
} MessageACKResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "success",
        .dataTypeSpecific.className = NULL,
        .number = MessageACKResponse_FieldNumber_Success,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MessageACKResponse__storage_, success),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "errCode",
        .dataTypeSpecific.className = NULL,
        .number = MessageACKResponse_FieldNumber_ErrCode,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(MessageACKResponse__storage_, errCode),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "message",
        .dataTypeSpecific.className = NULL,
        .number = MessageACKResponse_FieldNumber_Message,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(MessageACKResponse__storage_, message),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "sessionId",
        .dataTypeSpecific.className = NULL,
        .number = MessageACKResponse_FieldNumber_SessionId,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(MessageACKResponse__storage_, sessionId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[MessageACKResponse class]
                                     rootClass:[MessageRoot class]
                                          file:MessageRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MessageACKResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\002\007\000\004\t\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MessageACKRequest

@implementation MessageACKRequest

@dynamic hasMessageId, messageId;
@dynamic hasSessionId, sessionId;

typedef struct MessageACKRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *messageId;
  NSString *sessionId;
} MessageACKRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "messageId",
        .dataTypeSpecific.className = NULL,
        .number = MessageACKRequest_FieldNumber_MessageId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MessageACKRequest__storage_, messageId),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "sessionId",
        .dataTypeSpecific.className = NULL,
        .number = MessageACKRequest_FieldNumber_SessionId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(MessageACKRequest__storage_, sessionId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[MessageACKRequest class]
                                     rootClass:[MessageRoot class]
                                          file:MessageRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MessageACKRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001\t\000\002\t\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
