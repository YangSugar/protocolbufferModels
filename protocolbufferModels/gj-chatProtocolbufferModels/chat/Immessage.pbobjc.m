// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: immessage.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "Immessage.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - ImmessageRoot

@implementation ImmessageRoot

// No extensions in the file and no imports, so no need to generate
// +extensionRegistry.

@end

#pragma mark - ImmessageRoot_FileDescriptor

static GPBFileDescriptor *ImmessageRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"com.jujin.cloud.customer.chat.app.model"
                                                     syntax:GPBFileSyntaxProto2];
  }
  return descriptor;
}

#pragma mark - IMMessageRequest

@implementation IMMessageRequest

@dynamic hasUserId, userId;
@dynamic hasMsgId, msgId;
@dynamic hasContent, content;
@dynamic hasTo, to;
@dynamic hasFrom, from;
@dynamic hasContentType, contentType;
@dynamic hasParam, param;

typedef struct IMMessageRequest__storage_ {
  uint32_t _has_storage_[1];
  int32_t contentType;
  NSString *userId;
  NSString *msgId;
  NSString *content;
  NSString *to;
  NSString *from;
  NSString *param;
} IMMessageRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userId",
        .dataTypeSpecific.className = NULL,
        .number = IMMessageRequest_FieldNumber_UserId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(IMMessageRequest__storage_, userId),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "msgId",
        .dataTypeSpecific.className = NULL,
        .number = IMMessageRequest_FieldNumber_MsgId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(IMMessageRequest__storage_, msgId),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "content",
        .dataTypeSpecific.className = NULL,
        .number = IMMessageRequest_FieldNumber_Content,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(IMMessageRequest__storage_, content),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "to",
        .dataTypeSpecific.className = NULL,
        .number = IMMessageRequest_FieldNumber_To,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(IMMessageRequest__storage_, to),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "from",
        .dataTypeSpecific.className = NULL,
        .number = IMMessageRequest_FieldNumber_From,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(IMMessageRequest__storage_, from),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "contentType",
        .dataTypeSpecific.className = NULL,
        .number = IMMessageRequest_FieldNumber_ContentType,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(IMMessageRequest__storage_, contentType),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "param",
        .dataTypeSpecific.className = NULL,
        .number = IMMessageRequest_FieldNumber_Param,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(IMMessageRequest__storage_, param),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[IMMessageRequest class]
                                     rootClass:[ImmessageRoot class]
                                          file:ImmessageRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(IMMessageRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001\006\000\002\005\000\006\013\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - IMMessageResponse

@implementation IMMessageResponse

@dynamic hasSuccess, success;
@dynamic hasMsgId, msgId;

typedef struct IMMessageResponse__storage_ {
  uint32_t _has_storage_[1];
  int32_t success;
  NSString *msgId;
} IMMessageResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "success",
        .dataTypeSpecific.className = NULL,
        .number = IMMessageResponse_FieldNumber_Success,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(IMMessageResponse__storage_, success),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "msgId",
        .dataTypeSpecific.className = NULL,
        .number = IMMessageResponse_FieldNumber_MsgId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(IMMessageResponse__storage_, msgId),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[IMMessageResponse class]
                                     rootClass:[ImmessageRoot class]
                                          file:ImmessageRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(IMMessageResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\002\005\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
