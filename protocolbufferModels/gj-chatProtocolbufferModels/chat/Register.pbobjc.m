// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: register.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "Register.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - RegisterRoot

@implementation RegisterRoot

// No extensions in the file and no imports, so no need to generate
// +extensionRegistry.

@end

#pragma mark - RegisterRoot_FileDescriptor

static GPBFileDescriptor *RegisterRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@""
                                                     syntax:GPBFileSyntaxProto2];
  }
  return descriptor;
}

#pragma mark - RegisterRequest

@implementation RegisterRequest

@dynamic hasSystem, system;
@dynamic hasDeviceToken, deviceToken;
@dynamic hasAppIdentifier, appIdentifier;
@dynamic hasDeviceId, deviceId;
@dynamic hasManufacturer, manufacturer;
@dynamic hasSessionId, sessionId;
@dynamic hasCustomerId, customerId;

typedef struct RegisterRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *system;
  NSString *deviceToken;
  NSString *appIdentifier;
  NSString *deviceId;
  NSString *manufacturer;
  NSString *sessionId;
  NSString *customerId;
} RegisterRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "system",
        .dataTypeSpecific.className = NULL,
        .number = RegisterRequest_FieldNumber_System,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RegisterRequest__storage_, system),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "deviceToken",
        .dataTypeSpecific.className = NULL,
        .number = RegisterRequest_FieldNumber_DeviceToken,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(RegisterRequest__storage_, deviceToken),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "appIdentifier",
        .dataTypeSpecific.className = NULL,
        .number = RegisterRequest_FieldNumber_AppIdentifier,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(RegisterRequest__storage_, appIdentifier),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "deviceId",
        .dataTypeSpecific.className = NULL,
        .number = RegisterRequest_FieldNumber_DeviceId,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(RegisterRequest__storage_, deviceId),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "manufacturer",
        .dataTypeSpecific.className = NULL,
        .number = RegisterRequest_FieldNumber_Manufacturer,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(RegisterRequest__storage_, manufacturer),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "sessionId",
        .dataTypeSpecific.className = NULL,
        .number = RegisterRequest_FieldNumber_SessionId,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(RegisterRequest__storage_, sessionId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "customerId",
        .dataTypeSpecific.className = NULL,
        .number = RegisterRequest_FieldNumber_CustomerId,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(RegisterRequest__storage_, customerId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RegisterRequest class]
                                     rootClass:[RegisterRoot class]
                                          file:RegisterRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RegisterRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\005\002\013\000\003\r\000\004\010\000\006\t\000\007\n\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RegisterResponse

@implementation RegisterResponse

@dynamic hasSuccess, success;
@dynamic hasErrCode, errCode;
@dynamic hasMessage, message;
@dynamic hasValue, value;
@dynamic hasSessionId, sessionId;

typedef struct RegisterResponse__storage_ {
  uint32_t _has_storage_[1];
  int32_t success;
  int32_t errCode;
  NSString *message;
  NSString *value;
  NSString *sessionId;
} RegisterResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "success",
        .dataTypeSpecific.className = NULL,
        .number = RegisterResponse_FieldNumber_Success,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RegisterResponse__storage_, success),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "errCode",
        .dataTypeSpecific.className = NULL,
        .number = RegisterResponse_FieldNumber_ErrCode,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(RegisterResponse__storage_, errCode),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "message",
        .dataTypeSpecific.className = NULL,
        .number = RegisterResponse_FieldNumber_Message,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(RegisterResponse__storage_, message),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "value",
        .dataTypeSpecific.className = NULL,
        .number = RegisterResponse_FieldNumber_Value,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(RegisterResponse__storage_, value),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "sessionId",
        .dataTypeSpecific.className = NULL,
        .number = RegisterResponse_FieldNumber_SessionId,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(RegisterResponse__storage_, sessionId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RegisterResponse class]
                                     rootClass:[RegisterRoot class]
                                          file:RegisterRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RegisterResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\002\007\000\005\t\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
