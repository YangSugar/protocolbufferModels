// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: queryorder.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "Queryorder.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - QueryorderRoot

@implementation QueryorderRoot

// No extensions in the file and no imports, so no need to generate
// +extensionRegistry.

@end

#pragma mark - QueryorderRoot_FileDescriptor

static GPBFileDescriptor *QueryorderRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"com.xinhuibao.cloud.app.mars.shortlink.model"
                                                     syntax:GPBFileSyntaxProto2];
  }
  return descriptor;
}

#pragma mark - QueryOrderRequest

@implementation QueryOrderRequest

@dynamic hasOffSet, offSet;
@dynamic hasLen, len;
@dynamic hasStartTime, startTime;
@dynamic hasEndTime, endTime;
@dynamic hasUserToken, userToken;
@dynamic hasSessionId, sessionId;

typedef struct QueryOrderRequest__storage_ {
  uint32_t _has_storage_[1];
  int32_t offSet;
  int32_t len;
  NSString *startTime;
  NSString *endTime;
  NSString *userToken;
  NSString *sessionId;
} QueryOrderRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "offSet",
        .dataTypeSpecific.className = NULL,
        .number = QueryOrderRequest_FieldNumber_OffSet,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(QueryOrderRequest__storage_, offSet),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "len",
        .dataTypeSpecific.className = NULL,
        .number = QueryOrderRequest_FieldNumber_Len,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(QueryOrderRequest__storage_, len),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "startTime",
        .dataTypeSpecific.className = NULL,
        .number = QueryOrderRequest_FieldNumber_StartTime,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(QueryOrderRequest__storage_, startTime),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "endTime",
        .dataTypeSpecific.className = NULL,
        .number = QueryOrderRequest_FieldNumber_EndTime,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(QueryOrderRequest__storage_, endTime),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "userToken",
        .dataTypeSpecific.className = NULL,
        .number = QueryOrderRequest_FieldNumber_UserToken,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(QueryOrderRequest__storage_, userToken),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "sessionId",
        .dataTypeSpecific.className = NULL,
        .number = QueryOrderRequest_FieldNumber_SessionId,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(QueryOrderRequest__storage_, sessionId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[QueryOrderRequest class]
                                     rootClass:[QueryorderRoot class]
                                          file:QueryorderRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(QueryOrderRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\005\001\006\000\003\t\000\004\007\000\005\t\000\006\t\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - OrderData

@implementation OrderData

@dynamic hasSymbol, symbol;
@dynamic hasOpenPrice, openPrice;
@dynamic hasSwaps, swaps;
@dynamic hasCloseTime, closeTime;
@dynamic hasSl, sl;
@dynamic hasCommission, commission;
@dynamic hasOpenTime, openTime;
@dynamic hasProfit, profit;
@dynamic hasTicket, ticket;
@dynamic hasVolume, volume;
@dynamic hasClosePrice, closePrice;
@dynamic hasCmd, cmd;
@dynamic hasTp, tp;
@dynamic hasComment, comment;
@dynamic hasTotalLots, totalLots;

typedef struct OrderData__storage_ {
  uint32_t _has_storage_[1];
  int32_t ticket;
  int32_t volume;
  int32_t cmd;
  NSString *symbol;
  NSString *comment;
  double openPrice;
  double swaps;
  int64_t closeTime;
  double sl;
  double commission;
  int64_t openTime;
  double profit;
  double closePrice;
  double tp;
  double totalLots;
} OrderData__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "symbol",
        .dataTypeSpecific.className = NULL,
        .number = OrderData_FieldNumber_Symbol,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(OrderData__storage_, symbol),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "openPrice",
        .dataTypeSpecific.className = NULL,
        .number = OrderData_FieldNumber_OpenPrice,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(OrderData__storage_, openPrice),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "swaps",
        .dataTypeSpecific.className = NULL,
        .number = OrderData_FieldNumber_Swaps,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(OrderData__storage_, swaps),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "closeTime",
        .dataTypeSpecific.className = NULL,
        .number = OrderData_FieldNumber_CloseTime,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(OrderData__storage_, closeTime),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "sl",
        .dataTypeSpecific.className = NULL,
        .number = OrderData_FieldNumber_Sl,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(OrderData__storage_, sl),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "commission",
        .dataTypeSpecific.className = NULL,
        .number = OrderData_FieldNumber_Commission,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(OrderData__storage_, commission),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "openTime",
        .dataTypeSpecific.className = NULL,
        .number = OrderData_FieldNumber_OpenTime,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(OrderData__storage_, openTime),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "profit",
        .dataTypeSpecific.className = NULL,
        .number = OrderData_FieldNumber_Profit,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(OrderData__storage_, profit),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "ticket",
        .dataTypeSpecific.className = NULL,
        .number = OrderData_FieldNumber_Ticket,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(OrderData__storage_, ticket),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "volume",
        .dataTypeSpecific.className = NULL,
        .number = OrderData_FieldNumber_Volume,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(OrderData__storage_, volume),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "closePrice",
        .dataTypeSpecific.className = NULL,
        .number = OrderData_FieldNumber_ClosePrice,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(OrderData__storage_, closePrice),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "cmd",
        .dataTypeSpecific.className = NULL,
        .number = OrderData_FieldNumber_Cmd,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(OrderData__storage_, cmd),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "tp",
        .dataTypeSpecific.className = NULL,
        .number = OrderData_FieldNumber_Tp,
        .hasIndex = 12,
        .offset = (uint32_t)offsetof(OrderData__storage_, tp),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "comment",
        .dataTypeSpecific.className = NULL,
        .number = OrderData_FieldNumber_Comment,
        .hasIndex = 13,
        .offset = (uint32_t)offsetof(OrderData__storage_, comment),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "totalLots",
        .dataTypeSpecific.className = NULL,
        .number = OrderData_FieldNumber_TotalLots,
        .hasIndex = 14,
        .offset = (uint32_t)offsetof(OrderData__storage_, totalLots),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeDouble,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[OrderData class]
                                     rootClass:[QueryorderRoot class]
                                          file:QueryorderRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(OrderData__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\005\003\t\000\005\t\000\010\010\000\014\n\000\020\t\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - QueryOrderReponse

@implementation QueryOrderReponse

@dynamic hasSuccess, success;
@dynamic hasErrCode, errCode;
@dynamic hasMessage, message;
@dynamic valueArray, valueArray_Count;
@dynamic hasSessionId, sessionId;

typedef struct QueryOrderReponse__storage_ {
  uint32_t _has_storage_[1];
  int32_t success;
  int32_t errCode;
  NSString *message;
  NSMutableArray *valueArray;
  NSString *sessionId;
} QueryOrderReponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "success",
        .dataTypeSpecific.className = NULL,
        .number = QueryOrderReponse_FieldNumber_Success,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(QueryOrderReponse__storage_, success),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "errCode",
        .dataTypeSpecific.className = NULL,
        .number = QueryOrderReponse_FieldNumber_ErrCode,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(QueryOrderReponse__storage_, errCode),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "message",
        .dataTypeSpecific.className = NULL,
        .number = QueryOrderReponse_FieldNumber_Message,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(QueryOrderReponse__storage_, message),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "valueArray",
        .dataTypeSpecific.className = GPBStringifySymbol(OrderData),
        .number = QueryOrderReponse_FieldNumber_ValueArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(QueryOrderReponse__storage_, valueArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "sessionId",
        .dataTypeSpecific.className = NULL,
        .number = QueryOrderReponse_FieldNumber_SessionId,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(QueryOrderReponse__storage_, sessionId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[QueryOrderReponse class]
                                     rootClass:[QueryorderRoot class]
                                          file:QueryorderRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(QueryOrderReponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\002\007\000\005\t\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
