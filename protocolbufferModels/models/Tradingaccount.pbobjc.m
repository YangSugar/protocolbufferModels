// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tradingaccount.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "Tradingaccount.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - TradingaccountRoot

@implementation TradingaccountRoot

// No extensions in the file and no imports, so no need to generate
// +extensionRegistry.

@end

#pragma mark - TradingaccountRoot_FileDescriptor

static GPBFileDescriptor *TradingaccountRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"com.xinhuibao.cloud.app.mars.shortlink.model"
                                                     syntax:GPBFileSyntaxProto2];
  }
  return descriptor;
}

#pragma mark - TradingAccountRequest

@implementation TradingAccountRequest

@dynamic hasSessionId, sessionId;
@dynamic hasUserToken, userToken;

typedef struct TradingAccountRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *userToken;
  NSString *sessionId;
} TradingAccountRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userToken",
        .dataTypeSpecific.className = NULL,
        .number = TradingAccountRequest_FieldNumber_UserToken,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(TradingAccountRequest__storage_, userToken),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "sessionId",
        .dataTypeSpecific.className = NULL,
        .number = TradingAccountRequest_FieldNumber_SessionId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(TradingAccountRequest__storage_, sessionId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[TradingAccountRequest class]
                                     rootClass:[TradingaccountRoot class]
                                          file:TradingaccountRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(TradingAccountRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001\t\000\002\t\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - TradingAccountData

@implementation TradingAccountData

@dynamic hasPrevMonthBalance, prevMonthBalance;
@dynamic hasEquity, equity;
@dynamic hasCredit, credit;
@dynamic hasMarginLevel, marginLevel;
@dynamic hasBalance, balance;
@dynamic hasMargin, margin;
@dynamic hasFl, fl;
@dynamic hasMarginFree, marginFree;

typedef struct TradingAccountData__storage_ {
  uint32_t _has_storage_[1];
  double prevMonthBalance;
  double equity;
  double credit;
  double marginLevel;
  double balance;
  double margin;
  double fl;
  double marginFree;
} TradingAccountData__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "prevMonthBalance",
        .dataTypeSpecific.className = NULL,
        .number = TradingAccountData_FieldNumber_PrevMonthBalance,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(TradingAccountData__storage_, prevMonthBalance),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "equity",
        .dataTypeSpecific.className = NULL,
        .number = TradingAccountData_FieldNumber_Equity,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(TradingAccountData__storage_, equity),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "credit",
        .dataTypeSpecific.className = NULL,
        .number = TradingAccountData_FieldNumber_Credit,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(TradingAccountData__storage_, credit),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "marginLevel",
        .dataTypeSpecific.className = NULL,
        .number = TradingAccountData_FieldNumber_MarginLevel,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(TradingAccountData__storage_, marginLevel),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "balance",
        .dataTypeSpecific.className = NULL,
        .number = TradingAccountData_FieldNumber_Balance,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(TradingAccountData__storage_, balance),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "margin",
        .dataTypeSpecific.className = NULL,
        .number = TradingAccountData_FieldNumber_Margin,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(TradingAccountData__storage_, margin),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "fl",
        .dataTypeSpecific.className = NULL,
        .number = TradingAccountData_FieldNumber_Fl,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(TradingAccountData__storage_, fl),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "marginFree",
        .dataTypeSpecific.className = NULL,
        .number = TradingAccountData_FieldNumber_MarginFree,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(TradingAccountData__storage_, marginFree),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeDouble,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[TradingAccountData class]
                                     rootClass:[TradingaccountRoot class]
                                          file:TradingaccountRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(TradingAccountData__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\004\001\020\000\004\013\000\007b\000\010\n\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - TradingAccountResponse

@implementation TradingAccountResponse

@dynamic hasSuccess, success;
@dynamic hasErrCode, errCode;
@dynamic hasMessage, message;
@dynamic hasValue, value;
@dynamic hasSessionId, sessionId;

typedef struct TradingAccountResponse__storage_ {
  uint32_t _has_storage_[1];
  int32_t success;
  int32_t errCode;
  NSString *message;
  TradingAccountData *value;
  NSString *sessionId;
} TradingAccountResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "success",
        .dataTypeSpecific.className = NULL,
        .number = TradingAccountResponse_FieldNumber_Success,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(TradingAccountResponse__storage_, success),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "errCode",
        .dataTypeSpecific.className = NULL,
        .number = TradingAccountResponse_FieldNumber_ErrCode,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(TradingAccountResponse__storage_, errCode),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "message",
        .dataTypeSpecific.className = NULL,
        .number = TradingAccountResponse_FieldNumber_Message,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(TradingAccountResponse__storage_, message),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "value",
        .dataTypeSpecific.className = GPBStringifySymbol(TradingAccountData),
        .number = TradingAccountResponse_FieldNumber_Value,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(TradingAccountResponse__storage_, value),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "sessionId",
        .dataTypeSpecific.className = NULL,
        .number = TradingAccountResponse_FieldNumber_SessionId,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(TradingAccountResponse__storage_, sessionId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[TradingAccountResponse class]
                                     rootClass:[TradingaccountRoot class]
                                          file:TradingaccountRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(TradingAccountResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\002\007\000\005\t\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
